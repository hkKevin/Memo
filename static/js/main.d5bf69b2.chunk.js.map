{"version":3,"sources":["containers/Memos/Memos.js","containers/AddMemo/AddMemo.js","components/UI/SideMenu/SideMenu.js","containers/FilteredMemos/FilteredMemos.js","App.js","serviceWorker.js","store/reducers/memos.js","index.js","store/actions/memos.js","store/actions/index.js","axios-orders.js"],"names":["ResponsiveReactGridLayout","WidthProvider","Responsive","Memos","props","_this","Object","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","memoClicked","memo","toggle","selectMemo","storeId","storeColor","OuterDeleteBtnClicked","setState","showInnerModal","innerDeleteBtnClicked","innerModalToggle","deleteMemo","onDeleteMemo","selectedId","state","db","onToggleModal","checkInput","onSelectMemo","title","content","hasTitle","hasContent","onStoreId","id","titleChangedHandler","event","target","value","onChangeTitle","contentChangedHandler","onChangeContent","updateMemoClicked","updateMemo","onUpdateMemo","onStoreColor","color","changeColor","onChangeColor","generateAddedMemos","addedMemos","length","map","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","key","onDoubleClick","style","memoStyle","className","data-grid","x","y","w","h","draggable","console","error","onLayoutChange","bind","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","dropdownOpen","layouts","getFromLS","YELLOW","border","backgroundColor","PURPLE","ORANGE","GREEN","BLUE","PINK","onFetchMemos","firebase","apps","initializeApp","apiKey","authDomain","databaseURL","database","layout","newLayout","layoutName","global","localStorage","setItem","JSON","stringify","_this2","atLeastOneInputHasValue","classes","dialog","showStoredMemo","_material_ui_core__WEBPACK_IMPORTED_MODULE_11__","open","showModal","onClose","fullWidth","maxWidth","paper","autoFocus","margin","label","type","required","onChange","selectedMemoTitle","multiline","rows","selectedMemoContent","formControl","selectedMemoColor","colorSelected","name","selectEmpty","root","onClick","variant","button","disabled","aria-labelledby","aria-describedby","_components_UI_SideMenu_SideMenu__WEBPACK_IMPORTED_MODULE_14__","history","_containers_AddMemo_AddMemo__WEBPACK_IMPORTED_MODULE_13__","memosFetched","breakpoints","lg","md","sm","xs","xxs","cols","rowHeight","isDraggable","progress","React","PureComponent","emptyObject","data","isEmpty","keys","constructor","savedLayout","getItem","parse","minW","maxW","connect","memos","tempMemos","showAllMemos","filterColor","dispatch","memoId","firebaseDb","memoTitle","memoContent","memoColor","actions","withStyles","theme","spacing","unit","input","display","minWidth","marginTop","AddMemo","deleteInput","saveMemo","memoData","Date","getTime","onSaveMemo","saveMemoClicked","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","Component","axios","SideMenu","menu","checked","openNestedList","dragToggleSwitched","onToggleDraggable","closeDrawer","openDrawer","createOnClick","onCreateMemo","filterOnClick","colorClicked","push","onFilterMemos","searchClicked","onSearch","fullList","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_icons__WEBPACK_IMPORTED_MODULE_9__","primary","in","timeout","unmountOnExit","component","disablePadding","nestedBlue","inset","nestedGreen","nestedOrange","nestedPink","nestedPurple","nestedYellow","href","rel","secondary","position","menuButton","aria-label","_material_ui_icons_Menu__WEBPACK_IMPORTED_MODULE_11___default","grow","searchIcon","_material_ui_icons_Search__WEBPACK_IMPORTED_MODULE_10___default","fab","size","anchor","onOpen","tabIndex","role","width","flexGrow","marginLeft","marginRight","paddingLeft","bottom","right","zIndex","tooltip","FilteredMemos","classCallCheck","possibleConstructorReturn","getPrototypeOf","searchOnChange","searchedWord","searchingMemo","filter","toLowerCase","includes","react_default","log","searchPaper","paperContainer","index_es","elevation","textField","goBack","ArrowBack_default","justifyContent","marginBottom","objectSpread","mixins","gutters","paddingBottom","App","routes","react_router","path","exact","to","withRouter","Boolean","window","location","hostname","match","initialState","showNewMemoDialog","arrIndex","arguments","undefined","action","newMemo","firebaseItemId","concat","editedmemos","index","updateIdUpdates","ref","update","then","catch","renewMemos","deleteMemoUpdates","updatedmemos","updateMemoUpdates","colorChangedMemos","changeColorUpdates","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","createMuiTheme","palette","main","ReactDOM","render","es","react_router_dom","core_styles","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","post","response","saveMemoSuccess","updateId","fetchMemos","fetchedMemos","fetch","ok","Error","statusText","json","__webpack_require__","d","__webpack_exports__","memos_saveMemo","axios__WEBPACK_IMPORTED_MODULE_0__","instance","n","create","baseURL"],"mappings":"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","file":"static/js/main.d5bf69b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport firebase from 'firebase';\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MenuItem, \r\n          Select, \r\n          InputLabel, \r\n          FormControl, \r\n          Dialog, \r\n          DialogTitle,\r\n          DialogActions, \r\n          DialogContent,\r\n          TextField, \r\n          Button,\r\n          CircularProgress } from '@material-ui/core';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport AddMemo from '../../containers/AddMemo/AddMemo';\r\nimport SideMenu from '../../components/UI/SideMenu/SideMenu';\r\nimport './Memos.css';\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n  progress: {\r\n    marginTop: theme.spacing.unit * 20,\r\n  },\r\n  paper: {\r\n    margin: 0\r\n  }\r\n});\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\nclass Memos extends React.PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.onLayoutChange = this.onLayoutChange.bind(this);\r\n    this.state = {\r\n      hasTitle: false,\r\n      hasContent: false,\r\n      dropdownOpen: false,\r\n      db: null,\r\n      layouts: getFromLS('layouts'),\r\n      memoStyle: {\r\n        'YELLOW': {\r\n          border: '1px solid #feef9c',\r\n          backgroundColor: '#feef9c'\r\n        },\r\n        'PURPLE': {\r\n          border: '1px solid #dcdfff',\r\n          backgroundColor: '#dcdfff'\r\n        },\r\n        'ORANGE': {\r\n          border: '1px solid #feccaf',\r\n          backgroundColor: '#feccaf'\r\n        },\r\n        'GREEN': {\r\n          border: '1px solid #b1ffb1',\r\n          backgroundColor: '#b1ffb1'\r\n        },\r\n        'BLUE': {\r\n          border: '1px solid #d8f1ff',\r\n          backgroundColor: '#d8f1ff'\r\n        },\r\n        'PINK': {\r\n          border: '1px solid #feb0bc',\r\n          backgroundColor: '#feb0bc'\r\n        }\r\n      },\r\n      showInnerModal: false\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.onFetchMemos();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set up Firebase config here once, for connecting to the db.\r\n    var config = {\r\n      apiKey: 'AIzaSyDgZKmgW7LpUpJmHkMpF0II4AcfHyfZFuo',\r\n      authDomain: 'memo-a117b.firebaseapp.com',\r\n      databaseURL: 'https://memo-a117b.firebaseio.com/'\r\n    };\r\n\r\n    // Prevent duplicate firebase app\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    // firebase.initializeApp(config);\r\n    this.setState({ db: firebase.database() });\r\n\r\n    \r\n  }\r\n\r\n  onLayoutChange(layout, newLayout) {\r\n      saveToLS(\"layouts\", newLayout);\r\n      this.setState({ layouts: newLayout })\r\n  }\r\n\r\n  colorSelected(event) {\r\n    this.changeColor(event.target.value);\r\n  }\r\n\r\n  memoClicked = (memo) => {\r\n    this.toggle();\r\n    this.selectMemo(memo);\r\n    this.storeId(memo);\r\n    this.storeColor(memo);\r\n  }\r\n\r\n  OuterDeleteBtnClicked = () => {\r\n    this.setState({ \r\n      showInnerModal: true\r\n    });\r\n  }\r\n\r\n  // Really delete the memo\r\n  innerDeleteBtnClicked = () => {\r\n    this.innerModalToggle();  // Close inner modal\r\n    this.toggle();  // Close outer modal\r\n    this.deleteMemo();  // Delete the memo on Firebase\r\n  }\r\n\r\n  // Delete the memo on Firebase\r\n  deleteMemo = () => {\r\n    this.props.onDeleteMemo(this.props.selectedId, this.state.db)\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.onToggleModal();\r\n  }\r\n\r\n  innerModalToggle = () => {\r\n    this.setState(state => ({ \r\n      showInnerModal: !state.showInnerModal\r\n    }));\r\n  }\r\n\r\n  selectMemo = (memo) => {\r\n    this.checkInput(memo);\r\n    this.props.onSelectMemo(memo.title, memo.content)\r\n  }\r\n\r\n  checkInput = (memo) => {\r\n    if (memo.title === null || memo.title === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n\r\n    if (memo.content === null || memo.content === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n  }\r\n\r\n  storeId = (memo) => {\r\n    this.props.onStoreId(memo.id)\r\n  }\r\n\r\n  titleChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n    this.props.onChangeTitle(event.target.value);\r\n  }\r\n\r\n  contentChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n    this.props.onChangeContent(event.target.value);\r\n  }\r\n\r\n  updateMemoClicked = () => {\r\n    this.toggle();\r\n    this.updateMemo();\r\n  }\r\n\r\n  updateMemo = () => {\r\n    this.props.onUpdateMemo(this.state.db);\r\n  }\r\n\r\n  storeColor = (memo) => {\r\n    this.props.onStoreColor(memo.color)\r\n  }\r\n\r\n  changeColor = (color) => {\r\n    this.props.onChangeColor(color, this.state.db);\r\n  }\r\n\r\n  generateAddedMemos = () => {\r\n    if (this.props.addedMemos.length > 0) {\r\n      return this.props.addedMemos.map(memo => (\r\n        <div\r\n          key={memo.id}\r\n          onDoubleClick={() => this.memoClicked(memo)}\r\n          style={this.state.memoStyle[memo.color]}\r\n          className='memo'\r\n          data-grid={{ x: 0, y: 0, w: 3, h: 5 }}\r\n        >\r\n\r\n          <h3>{memo.title}</h3>\r\n          <hr />\r\n          <div>{memo.content}</div>\r\n          {this.props.draggable\r\n            ? <i className=\"material-icons dragHandle\">drag_handle</i>\r\n            : null}\r\n        </div>\r\n\r\n      ));\r\n    } else {\r\n      console.error('no firebase widgets available yet.');\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n    \r\n    const { classes } = this.props;\r\n\r\n    let dialog = null;\r\n    if (this.props.showStoredMemo) {\r\n\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            className={classes.paper}\r\n          >\r\n            {/* <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle> */}\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.props.selectedMemoTitle}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.props.selectedMemoContent}\r\n              />\r\n\r\n              <FormControl \r\n                required \r\n                className={classes.formControl}>\r\n                <InputLabel>Color</InputLabel>\r\n                  <Select\r\n                    value={this.props.selectedMemoColor}\r\n                    onChange={(event) => this.colorSelected(event)}\r\n                    name=\"color\"\r\n                    className={classes.selectEmpty}\r\n                  >\r\n                    <MenuItem value=\"BLUE\">Blue</MenuItem>\r\n                    <MenuItem value=\"GREEN\">Green</MenuItem>\r\n                    <MenuItem value=\"ORANGE\">Orange</MenuItem>\r\n                    <MenuItem value=\"PINK\">Pink</MenuItem>\r\n                    <MenuItem value=\"PURPLE\">Purple</MenuItem>\r\n                    <MenuItem value=\"YELLOW\">Yellow</MenuItem>\r\n                  </Select>\r\n              </FormControl>\r\n\r\n            </DialogContent>\r\n            <DialogActions className={classes.root}>\r\n              <Button \r\n                onClick={this.OuterDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n              <Button \r\n                onClick={this.updateMemoClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                UPDATE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={this.state.showInnerModal}\r\n            onClose={this.innerModalToggle}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Really delete this memo?\"}</DialogTitle>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.innerModalToggle} \r\n                color=\"primary\">\r\n                CANCEL\r\n              </Button>\r\n              <Button \r\n                onClick={this.innerDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <SideMenu history={this.props.history} />\r\n        <AddMemo />\r\n\r\n        {this.props.memosFetched\r\n          ? \r\n          <ResponsiveReactGridLayout\r\n            className=\"layout\"\r\n            breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\r\n            cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n            rowHeight={40}\r\n            layouts={this.state.layouts}\r\n            onLayoutChange={(layout, newLayout) =>\r\n              this.onLayoutChange(layout, newLayout)\r\n            }\r\n            isDraggable={this.props.draggable}\r\n          >\r\n            {this.generateAddedMemos()}\r\n          </ResponsiveReactGridLayout>\r\n          : (<CircularProgress color=\"secondary\" className={classes.progress} />)\r\n        }\r\n\r\n        {dialog}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const emptyObject = (data) => {\r\n  let isEmpty = true;\r\n\r\n  if (data && data !== 'undefined' && data !== null) {\r\n    isEmpty = Object.keys(data).length === 0 && data.constructor === Object;\r\n  }\r\n\r\n  return isEmpty;\r\n}\r\n\r\nfunction getFromLS(layoutName) {\r\n  if (global.localStorage) {\r\n    let savedLayout = global.localStorage.getItem(layoutName);\r\n    if (savedLayout && !emptyObject(savedLayout)) {\r\n      return JSON.parse(savedLayout).layouts;\r\n    } else {\r\n      return { lg: [{ x: 0, y: 0, w: 4, h: 4, minW: 4, maxW: 8 }] };\r\n    }\r\n  }\r\n}\r\n\r\nexport function saveToLS(layoutName, value) {\r\n  if (global.localStorage) {\r\n    global.localStorage.setItem(layoutName, JSON.stringify({ layouts: value }));\r\n  } else {\r\n    console.error('localStorage is not supported');\r\n  }\r\n}\r\n\r\nexport const mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    selectedMemoColor: state.selectedMemoColor,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor,\r\n    draggable: state.draggable\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteMemo: (id, db) => dispatch({ type: 'DELETE_MEMO', memoId: id, firebaseDb: db }),\r\n    onSelectMemo: (title, content) => dispatch({ type: 'SELECT_MEMO', memoTitle: title, memoContent: content }),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' }),\r\n    onStoreId: (id) => dispatch({ type: 'STORE_ID', memoId: id }),\r\n    onChangeTitle: (title) => dispatch({ type: 'CHANGE_TITLE', memoTitle: title }),\r\n    onChangeContent: (content) => dispatch({ type: 'CHANGE_CONTENT', memoContent: content }),\r\n    onUpdateMemo: (db) => dispatch({ type: 'UPDATE_MEMO', firebaseDb: db }),\r\n    onStoreColor: (color) => dispatch({ type: 'STORE_COLOR', memoColor: color }),\r\n    onChangeColor: (color, db) => dispatch({ type: 'CHANGE_COLOR', memoColor: color, firebaseDb: db }),\r\n    onFetchMemos: () => dispatch(actions.fetchMemos())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Memos));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios-orders';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, TextField, Button } from '@material-ui/core';\r\n\r\nimport './AddMemo.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  }\r\n});\r\n\r\nclass AddMemo extends Component {\r\n\r\n\tstate = {\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t\thasTitle: false,\r\n\t\thasContent: false\r\n\t}\r\n\r\n\ttoggle = () => {\r\n\t\tthis.props.onToggleModal();\r\n\t\tthis.deleteInput();\t// Clear previous input fields\r\n\t}\r\n\r\n\tsaveMemo = () => {\r\n\t\tconst memoData = {\r\n\t\t\tid: new Date().getTime(),\r\n\t\t\ttitle: this.state.title,\r\n\t\t\tcontent: this.state.content,\r\n\t\t\tcolor: 'YELLOW'\r\n\t\t}\r\n\t\tthis.props.onSaveMemo(memoData);\r\n\t}\r\n\r\n\t// Clear previous input fields\r\n\tdeleteInput() {\r\n\t\tthis.setState({\r\n\t\t\ttitle: '',\r\n\t\t\tcontent: '',\r\n\t\t\thasTitle: false,\r\n\t\t\thasContent: false\r\n\t\t})\r\n\t}\r\n\r\n\tsaveMemoClicked = () => {\r\n\t\tthis.toggle();\r\n\t\tthis.saveMemo();\r\n\t}\r\n\r\n\ttitleChangedHandler = (event) => {\r\n\t\tif (event.target.value === null || event.target.value === '') {\r\n\t\t\tthis.setState({ hasTitle: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ hasTitle: true });\r\n\t\t}\r\n\t\tthis.setState({ title: event.target.value });\r\n\t}\r\n\r\n\tcontentChangedHandler = (event) => {\r\n\t\tif (event.target.value === null || event.target.value === '') {\r\n\t\t\tthis.setState({ hasContent: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ hasContent: true });\r\n\t\t}\r\n\t\tthis.setState({ content: event.target.value });\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tlet atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n\r\n    const { classes } = this.props;\r\n\r\n    let dialog = null;\r\n\t\tif (!this.props.showStoredMemo) {\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth={true}\r\n            maxWidth=\"sm\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">Create New Memo</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.state.title}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.state.content}\r\n              />\r\n            </DialogContent>\r\n            <DialogActions className={classes.root}>\r\n              <Button \r\n                onClick={this.saveMemoClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                SAVE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n        {dialog}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n    showStoredMemo: state.showStoredMemo,\r\n\t\tshowModal: state.showModal\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSaveMemo: (memoData) => dispatch(actions.saveMemo(memoData)),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' })\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(AddMemo, axios));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ListItemSecondaryAction, \r\n          Typography, \r\n          Toolbar, \r\n          AppBar, \r\n          IconButton, \r\n          ListItemText, \r\n          ListItemIcon, \r\n          ListItem, \r\n          Divider, \r\n          List, \r\n          SwipeableDrawer, \r\n          Switch,\r\n          Collapse,\r\n          Fab,\r\n          Icon } from '@material-ui/core';\r\nimport {  ColorLens, \r\n          Create, \r\n          DragHandle, \r\n          ExpandLess, \r\n          ExpandMore } from '@material-ui/icons';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport './SideMenu.css';\r\n\r\nconst styles = theme => ({\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  searchIcon: {\r\n    marginRight: -12\r\n  },\r\n  nestedBlue: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#d8f1ff'\r\n  },\r\n  nestedGreen: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#b1ffb1'\r\n  },\r\n  nestedOrange: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feccaf'\r\n  },\r\n  nestedPink: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feb0bc'\r\n  },\r\n  nestedPurple: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#dcdfff'\r\n  },\r\n  nestedYellow: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feef9c'\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2,\r\n    zIndex: theme.zIndex.tooltip\r\n  }\r\n});\r\n\r\n\r\nclass SideMenu extends Component {\r\n  state = {\r\n    menu: false,\r\n    checked: false,\r\n    openNestedList: false\r\n  };\r\n\r\n  dragToggleSwitched = event => {\r\n    this.setState({ checked: !this.state.checked });\r\n\r\n    if (event.target.checked === true) {\r\n      // Drag mode ON\r\n      this.props.onToggleDraggable(true);\r\n    } else {\r\n      // Drag mode OFF\r\n      this.props.onToggleDraggable(false);\r\n    }\r\n  };\r\n\r\n  closeDrawer = () => {\r\n    this.setState({ menu: false });\r\n  };\r\n\r\n  openDrawer = () => {\r\n    this.setState({ menu: true });\r\n  };\r\n\r\n  // Create new memo\r\n  createOnClick = () => {\r\n    this.closeDrawer();\r\n    this.props.onCreateMemo();\r\n  }\r\n\r\n  // Open sub-list of colors to be filtered\r\n  filterOnClick = () => {\r\n    this.setState( state => ({\r\n      openNestedList: !state.openNestedList\r\n    }));\r\n  }\r\n\r\n  // One of the color is clicked\r\n  colorClicked = (filterColor) => {\r\n\t\tthis.props.history.push('/memo/filtered'); // Redirect to that path\r\n    this.props.onFilterMemos(filterColor);  // Pass the filter color to Redux\r\n    this.closeDrawer(); // Close the side menu\r\n    this.setState({ openNestedList: false }); // Close sub-list of colors\r\n    this.props.onToggleDraggable(false);  // Turn drag mode OFF\r\n  }\r\n\r\n  // Search icon is clicked\r\n  searchClicked = () => {\r\n    this.props.onSearch();  // Show all memos and ready to filter memos by text\r\n    this.props.history.push('/memo/filtered'); // Redirect to that path\r\n    this.props.onToggleDraggable(false);  // Turn drag mode OFF\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const fullList = (\r\n      <div className={classes.fullList}>\r\n        <List>\r\n          <ListItem button onClick={this.filterOnClick}>\r\n            <ListItemIcon>\r\n              <ColorLens color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Filter by Color\" />\r\n            {this.state.openNestedList ? <ExpandLess color=\"secondary\" /> : <ExpandMore color=\"secondary\" />}\r\n          </ListItem>\r\n          <Collapse in={this.state.openNestedList} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n              <ListItem button className={classes.nestedBlue}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Blue\" \r\n                  onClick={() => this.colorClicked(\"BLUE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedGreen}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Green\" \r\n                  onClick={() => this.colorClicked(\"GREEN\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedOrange}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Orange\" \r\n                  onClick={() => this.colorClicked(\"ORANGE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedPink}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Pink\" \r\n                  onClick={() => this.colorClicked(\"PINK\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedPurple}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Purple\" \r\n                  onClick={() => this.colorClicked(\"PURPLE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedYellow}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Yellow\" \r\n                  onClick={() => this.colorClicked(\"YELLOW\")} />\r\n              </ListItem>\r\n            </List>\r\n          </Collapse>\r\n\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <DragHandle color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Drag Memo\" />\r\n            <ListItemSecondaryAction>\r\n              <Switch\r\n                onChange={event => this.dragToggleSwitched(event)}\r\n                checked={this.state.checked}\r\n              />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n\r\n          <ListItem \r\n            button\r\n            onClick={this.createOnClick}>\r\n            <ListItemIcon>\r\n              <Create color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Create New Memo\" />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem \r\n            button \r\n            component=\"a\" \r\n            href=\"https://github.com/hkKevin/memo\" \r\n            target=\"_blank\" rel=\"noopener\">\r\n            <ListItemText secondary=\"GitHub Repository\" />\r\n          </ListItem>\r\n          <ListItem \r\n            button \r\n            component=\"a\" \r\n            href=\"https://github.com/hkKevin\" \r\n            target=\"_blank\" rel=\"noopener\">\r\n            <ListItemText secondary=\"Developed by Pak Kiu Leung\" />\r\n          </ListItem>\r\n        </List>\r\n        \r\n          \r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <AppBar color=\"inherit\" position=\"fixed\" className={classes.root}>\r\n          <Toolbar>\r\n            <IconButton \r\n               color=\"primary\"\r\n               onClick={this.openDrawer} \r\n               className={classes.menuButton} \r\n               aria-label=\"Menu\">\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"primary\">\r\n              Memo\r\n            </Typography>\r\n            <div className={classes.grow} />\r\n            <IconButton \r\n              color=\"primary\" \r\n              className={classes.searchIcon}\r\n              onClick={this.searchClicked}>\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Fab \r\n          color=\"primary\" \r\n          aria-label=\"Edit\" \r\n          className={classes.fab}\r\n          size=\"medium\"\r\n          onClick={this.createOnClick}>\r\n          <Icon>edit_icon</Icon>\r\n        </Fab>\r\n\r\n        <SwipeableDrawer \r\n          anchor=\"left\"\r\n          open={this.state.menu}  // Is the menu opened or closed\r\n          onOpen={this.openDrawer}  // Open the menu\r\n          onClose={this.closeDrawer} /* Close the menu*/ >\r\n          <div\r\n            tabIndex={0}\r\n            role=\"button\">\r\n            {fullList}\r\n          </div>\r\n        </SwipeableDrawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n  return {\r\n    onToggleDraggable: (draggable) => dispatch({ type: 'TOGGLE_DRAGGABLE', isDraggable: draggable }),\r\n    onCreateMemo: () => dispatch({ type: 'CREATE_MEMO' }),\r\n    onFilterMemos: (filterColor) => dispatch({ type: 'FILTER_MEMOS', filterColor: filterColor }),\r\n    onSearch: () => dispatch({ type: 'SEARCH_MEMO' })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(SideMenu));","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MenuItem, \r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Select, \r\n  InputLabel, \r\n  FormControl, \r\n  Dialog, \r\n  DialogActions, \r\n  DialogContent,\r\n  TextField, \r\n  Button,\r\n  DialogTitle, \r\n  Paper } from '@material-ui/core';\r\n  import ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport { connect } from 'react-redux';\r\nimport firebase from 'firebase';\r\n\r\nimport './FilteredMemos.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst styles = theme => ({\r\n  paperContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginTop: theme.spacing.unit * 9,\r\n    marginBottom: -theme.spacing.unit * 9\r\n  },\r\n  paper: {\r\n    ...theme.mixins.gutters(),\r\n    // paddingTop: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit * 1,\r\n    maxWidth: 300,  \r\n  },\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 220,\r\n  }\r\n});\r\n\r\nclass FilteredMemos extends Component {\r\n\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasTitle: false,\r\n      hasContent: false,\r\n      dropdownOpen: false,\r\n      db: null,\r\n      memoStyle: {\r\n        'YELLOW': {\r\n          border: '1px solid #feef9c',\r\n          backgroundColor: '#feef9c'\r\n        },\r\n        'PURPLE': {\r\n          border: '1px solid #dcdfff',\r\n          backgroundColor: '#dcdfff'\r\n        },\r\n        'ORANGE': {\r\n          border: '1px solid #feccaf',\r\n          backgroundColor: '#feccaf'\r\n        },\r\n        'GREEN': {\r\n          border: '1px solid #b1ffb1',\r\n          backgroundColor: '#b1ffb1'\r\n        },\r\n        'BLUE': {\r\n          border: '1px solid #d8f1ff',\r\n          backgroundColor: '#d8f1ff'\r\n        },\r\n        'PINK': {\r\n          border: '1px solid #feb0bc',\r\n          backgroundColor: '#feb0bc'\r\n        }\r\n      },\r\n      showInnerModal: false,\r\n      searchedWord: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set up Firebase config here once, for connecting to the db.\r\n    var config = {\r\n      apiKey: 'AIzaSyDgZKmgW7LpUpJmHkMpF0II4AcfHyfZFuo',\r\n      authDomain: 'memo-a117b.firebaseapp.com',\r\n      databaseURL: 'https://memo-a117b.firebaseio.com/'\r\n    };\r\n    // Prevent duplicate firebase app\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    // firebase.initializeApp(config);\r\n    this.setState({ db: firebase.database() });\r\n  }\r\n\r\n  colorSelected(event) {\r\n    this.changeColor(event.target.value);\r\n  }\r\n\r\n  memoClicked = (memo) => {\r\n    this.toggle();\r\n    this.selectMemo(memo);\r\n    this.storeId(memo);\r\n    this.storeColor(memo);\r\n  }\r\n\r\n  OuterDeleteBtnClicked = () => {\r\n    this.setState({ \r\n      showInnerModal: true\r\n    });\r\n  }\r\n\r\n  // Really delete the memo\r\n  innerDeleteBtnClicked = () => {\r\n    this.innerModalToggle();  // Close inner modal\r\n    this.toggle();  // Close outer modal\r\n    this.deleteMemo();  // Delete the memo on Firebase\r\n  }\r\n\r\n  // Delete the memo on Firebase\r\n  deleteMemo = () => {\r\n    this.props.onDeleteMemo(this.props.selectedId, this.state.db)\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.onToggleModal();\r\n  }\r\n\r\n  innerModalToggle = () => {\r\n    this.setState(state => ({ \r\n      showInnerModal: !state.showInnerModal\r\n    }));\r\n  }\r\n\r\n  selectMemo = (memo) => {\r\n    this.checkInput(memo);\r\n    this.props.onSelectMemo(memo.title, memo.content)\r\n  }\r\n\r\n  checkInput = (memo) => {\r\n    if (memo.title === null || memo.title === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n\r\n    if (memo.content === null || memo.content === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n  }\r\n\r\n  storeId = (memo) => {\r\n    this.props.onStoreId(memo.id)\r\n  }\r\n\r\n  titleChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n    this.props.onChangeTitle(event.target.value);\r\n  }\r\n\r\n  contentChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n    this.props.onChangeContent(event.target.value);\r\n  }\r\n\r\n  updateMemoClicked = () => {\r\n    this.toggle();\r\n    this.updateMemo();\r\n  }\r\n\r\n  updateMemo = () => {\r\n    this.props.onUpdateMemo(this.state.db);\r\n  }\r\n\r\n  storeColor = (memo) => {\r\n    this.props.onStoreColor(memo.color)\r\n  }\r\n\r\n  changeColor = (color) => {\r\n    this.props.onChangeColor(color, this.state.db);\r\n  }\r\n\r\n  searchOnChange = (event) => {\r\n    this.setState({\r\n      searchedWord: event.target.value\r\n    });\r\n  }\r\n\r\n  generateAddedMemos = () => {\r\n    if (this.props.addedMemos.length > 0) {\r\n\r\n      let filteredMemos = \"\"\r\n      if ( !this.props.searchingMemo ) {\r\n        // Show filtered memos\r\n        filteredMemos = this.props.addedMemos.filter(memo => memo.color === this.props.filterColor);\r\n      } else {\r\n        // Show memos that contain searched word\r\n        filteredMemos = this.props.addedMemos.filter(\r\n          memo => memo.title.toLowerCase().includes(this.state.searchedWord.toLowerCase()) || \r\n                  memo.content.toLowerCase().includes(this.state.searchedWord.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      return filteredMemos.map(memo => (\r\n        <div\r\n          key={memo.id}\r\n          onDoubleClick={() => this.memoClicked(memo)}\r\n          style={this.state.memoStyle[memo.color]}\r\n          className='memo'\r\n        >\r\n\r\n          <h3>{memo.title}</h3>\r\n          <hr />\r\n          <div>{memo.content}</div>\r\n          {this.props.draggable\r\n            ? <i className=\"material-icons dragHandle\">drag_handle</i>\r\n            : null}\r\n        </div>\r\n\r\n      ));\r\n    } else {\r\n      console.error('no firebase widgets available yet.');\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n\r\n\r\n\trender() {\r\n\r\n    console.log(this.state.searchedWord)\r\n\r\n    let atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n\r\n    const { classes } = this.props;\r\n\r\n    let searchPaper = null;\r\n    searchPaper = (\r\n      <div className={classes.paperContainer}>\r\n        <Paper className={classes.paper} elevation={2}>\r\n          <TextField\r\n            id=\"standard-search\"\r\n            key=\"searchField\"\r\n            name=\"searchField\"\r\n            label=\"Find...\"\r\n            type=\"search\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            autoFocus\r\n            onChange={this.searchOnChange}\r\n            value={this.state.searchedWord}\r\n          />\r\n        </Paper>\r\n      </div>\r\n    );\r\n\r\n    let dialog = null;\r\n    if (this.props.showStoredMemo) {\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth={true}\r\n            maxWidth=\"sm\"\r\n          >\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.props.selectedMemoTitle}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.props.selectedMemoContent}\r\n              />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel>Color</InputLabel>\r\n                  <Select\r\n                    value={this.props.selectedMemoColor}\r\n                    onChange={(event) => this.colorSelected(event)}\r\n                    name=\"color\"\r\n                    className={classes.selectEmpty}\r\n                  >\r\n                    <MenuItem value=\"BLUE\">Blue</MenuItem>\r\n                    <MenuItem value=\"GREEN\">Green</MenuItem>\r\n                    <MenuItem value=\"ORANGE\">Orange</MenuItem>\r\n                    <MenuItem value=\"PINK\">Pink</MenuItem>\r\n                    <MenuItem value=\"PURPLE\">Purple</MenuItem>\r\n                    <MenuItem value=\"YELLOW\">Yellow</MenuItem>\r\n                  </Select>\r\n              </FormControl>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.OuterDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n              <Button \r\n                onClick={this.updateMemoClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                UPDATE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={this.state.showInnerModal}\r\n            onClose={this.innerModalToggle}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Really delete this memo?\"}</DialogTitle>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.innerModalToggle} \r\n                color=\"primary\">\r\n                CANCEL\r\n              </Button>\r\n              <Button \r\n                onClick={this.innerDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    \r\n\t\treturn (\r\n\t\t\t<div>\r\n        <AppBar color=\"default\" position=\"fixed\">\r\n          <Toolbar>\r\n            <IconButton \r\n              onClick={() => this.props.history.goBack()} \r\n              className={classes.menuButton} \r\n              aria-label=\"Menu\">\r\n              <ArrowBack color=\"primary\" />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"primary\">\r\n              Memo\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        {this.props.searchingMemo ? (searchPaper) : null}\r\n\r\n        {this.props.memosFetched\r\n          ?\r\n          (\r\n          <div className=\"filteredLayout\">\r\n            {this.generateAddedMemos()}\r\n          </div>\r\n          )\r\n          : null\r\n        }\r\n\r\n        {dialog}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    selectedMemoColor: state.selectedMemoColor,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor,\r\n    draggable: state.draggable,\r\n    searchingMemo: state.searchingMemo\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteMemo: (id, db) => dispatch({ type: 'DELETE_MEMO', memoId: id, firebaseDb: db }),\r\n    onSelectMemo: (title, content) => dispatch({ type: 'SELECT_MEMO', memoTitle: title, memoContent: content }),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' }),\r\n    onStoreId: (id) => dispatch({ type: 'STORE_ID', memoId: id }),\r\n    onChangeTitle: (title) => dispatch({ type: 'CHANGE_TITLE', memoTitle: title }),\r\n    onChangeContent: (content) => dispatch({ type: 'CHANGE_CONTENT', memoContent: content }),\r\n    onUpdateMemo: (db) => dispatch({ type: 'UPDATE_MEMO', firebaseDb: db }),\r\n    onStoreColor: (color) => dispatch({ type: 'STORE_COLOR', memoColor: color }),\r\n    onChangeColor: (color, db) => dispatch({ type: 'CHANGE_COLOR', memoColor: color, firebaseDb: db }),\r\n    onFetchMemos: () => dispatch(actions.fetchMemos())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FilteredMemos));\r\n","import React, { Component } from 'react';\nimport { Route, Redirect, Switch, withRouter } from 'react-router-dom';\n\nimport './App.css';\nimport Memos from './containers/Memos/Memos';\nimport FilteredMemos from './containers/FilteredMemos/FilteredMemos';\n\nclass App extends Component {\n  \n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path='/memo/filtered' component={FilteredMemos} />\n        <Route path='/memo' exact component={Memos} />\n        <Redirect to='/memo' />\n      </Switch>\n    );\n\n\n\n    return (\n      <div className=\"App\">\n        {routes}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import firebase from 'firebase';\r\n\r\n// Action Reducer\r\n\r\nconst initialState = {\r\n  memos: [],\r\n  selectedMemoTitle: null,\r\n  selectedMemoContent: null,\r\n  selectedId: null,\r\n  selectedMemoColor: null,\r\n  showModal: false,\r\n  showNewMemoDialog: false,\r\n  showStoredMemo: false,\r\n  showAllMemos: true,\r\n  filterColor: \"\",\r\n  arrIndex: 0,\r\n  memosFetched: false,\r\n  draggable: false,\r\n  searchingMemo: false\r\n}\r\n\r\nconst memos = (state = initialState, action) => {\r\n\r\n  switch ( action.type ) {\r\n\r\n    // Within both AddMemo.js & Memos.js:\r\n\r\n    case 'TOGGLE_MODAL':\r\n      return { \r\n        ...state,\r\n        showModal: !state.showModal\r\n      }\r\n\r\n    // Within AddMemo.js:\r\n\r\n    case 'SAVE_MEMO_SUCCESS':\r\n      const newMemo = {\r\n        ...action.memoData,\r\n        id: action.firebaseItemId\r\n      }\r\n      return {\r\n        ...state,\r\n        memos: state.memos.concat(newMemo),\r\n        selectedId: newMemo.id\r\n      }\r\n\r\n    case 'FETCH_MEMOS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        memos: action.memos,\r\n        memosFetched: true,\r\n        showAllMemos: true\r\n      }\r\n\r\n\r\n    // Within Memos.js:\r\n\r\n    case 'UPDATE_ID':\r\n    const editedmemos = state.memos.map( (memo, index) => {\r\n    // Only edit the newly added memo in the memos array\r\n    if (memo.id === state.selectedId) {\r\n      memo.id = state.selectedId;\r\n      state.arrIndex = index\r\n    }\r\n    return memo;\r\n    })\r\n    \r\n    const firebaseDb = firebase.database();\r\n    const updateIdUpdates = {};\r\n    // Update the selected array element to specific child node of Firebase\r\n    updateIdUpdates['/memos/' + state.selectedId] = editedmemos[state.arrIndex];\r\n    firebaseDb.ref()\r\n      .update(updateIdUpdates)\r\n      .then(() => {\r\n        // memo updated in firebase.\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n    return state;\r\n      \r\n\r\n    case 'STORE_COLOR':\r\n      return {\r\n        ...state,\r\n        selectedMemoColor: action.memoColor\r\n      }\r\n\r\n\r\n    case 'DELETE_MEMO':\r\n      const renewMemos = state.memos.map( (memo, index) => {\r\n        // Only delete selected memo that is in the memos array\r\n        if (memo.id === action.memoId) {\r\n          memo = null\r\n          state.arrIndex = index\r\n        }\r\n        return memo;\r\n        })\r\n\r\n      let deleteMemoUpdates = {};\r\n      deleteMemoUpdates['/memos/' + action.memoId] = renewMemos[state.arrIndex];\r\n      action.firebaseDb.ref().update(deleteMemoUpdates)\r\n        .then(() => {\r\n          // memo deleted in firebase.       \r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        })\r\n      return { \r\n        ...state,\r\n        memos: state.memos.filter(memo => memo.id !== action.memoId)\r\n      }      \r\n\r\n\r\n    case 'SELECT_MEMO':      \r\n      return { \r\n        ...state,\r\n        selectedMemoTitle: action.memoTitle,\r\n        selectedMemoContent: action.memoContent,\r\n        showStoredMemo: true\r\n      }\r\n\r\n    case 'STORE_ID':      \r\n      return { \r\n        ...state,\r\n        selectedId: action.memoId\r\n      }\r\n\r\n    case 'CHANGE_TITLE':      \r\n      return { \r\n        ...state,\r\n        selectedMemoTitle: action.memoTitle\r\n      }\r\n\r\n    case 'CHANGE_CONTENT':      \r\n      return { \r\n        ...state,\r\n        selectedMemoContent: action.memoContent\r\n      }\r\n\r\n\r\n    case 'UPDATE_MEMO':\r\n      const updatedmemos = state.memos.map( (memo, index) => {\r\n      // Only edit the selected memo in the memos array\r\n      if (memo.id === state.selectedId) {\r\n        memo.id = state.selectedId;\r\n        memo.title =  state.selectedMemoTitle;\r\n        memo.content = state.selectedMemoContent;\r\n        state.arrIndex = index\r\n      }\r\n      return memo;\r\n      })\r\n      \r\n      const updateMemoUpdates = {};\r\n      // Update the selected array element to specific child node of Firebase\r\n      updateMemoUpdates['/memos/' + state.selectedId] = updatedmemos[state.arrIndex];\r\n      action.firebaseDb.ref()\r\n        .update(updateMemoUpdates)\r\n        .then(() => {\r\n          // memo updated in firebase.\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      return state;    \r\n\r\n\r\n    case 'CHANGE_COLOR':\r\n      const colorChangedMemos = state.memos.map( (memo, index) => {\r\n        // Only edit selected memo in the memos array\r\n        if (memo.id === state.selectedId) {\r\n          memo.color = action.memoColor\r\n          state.arrIndex = index\r\n        }\r\n        return memo;\r\n      })\r\n\r\n      const changeColorUpdates = {};\r\n      // Update the selected array element to specific child node of Firebase\r\n      changeColorUpdates['/memos/' + state.selectedId] = colorChangedMemos[state.arrIndex];\r\n      action.firebaseDb.ref()\r\n        .update(changeColorUpdates)\r\n        .then(() => {\r\n          // memo updated in firebase.\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      return {\r\n        ...state,\r\n        memos: colorChangedMemos,\r\n        selectedMemoColor: action.memoColor\r\n      }\r\n    \r\n    // Only show memos with selected color\r\n    case 'FILTER_MEMOS':      \r\n      return { \r\n        ...state,\r\n        showAllMemos: false,\r\n        filterColor: action.filterColor,\r\n        searchingMemo: false\r\n      }\r\n\r\n    case 'TOGGLE_DRAGGABLE':      \r\n      return { \r\n        ...state,\r\n        draggable: action.isDraggable\r\n      }\r\n\r\n    case 'CREATE_MEMO':\r\n      return { \r\n        ...state,\r\n        showModal: true,\r\n        showStoredMemo: false\r\n      }\r\n    \r\n      // Filter memos by words\r\n    case 'SEARCH_MEMO':\r\n      return { \r\n        ...state,\r\n        searchingMemo: true\r\n      }\r\n    \r\n\r\n\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default memos;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/memos';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// composeEnhancers\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(thunk)\n));\n\n// const store = createStore(reducer, composeEnhancers(\n//   applyMiddleware(thunk)\n// ));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#880e4f',\n    },\n    secondary: {\n      main: '#1a237e',\n    }\n  },\n  \n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from '../../axios-orders';\r\n\r\n// Action Creators:\r\n\r\nexport const saveMemoSuccess = (memoData, firebaseItemId) => {\r\n  return {\r\n    type: 'SAVE_MEMO_SUCCESS',\r\n    memoData: memoData,\r\n    firebaseItemId: firebaseItemId,\r\n  };\r\n};\r\n\r\nexport const updateId = (memoData, firebaseItemId) => {\r\n  return {\r\n    type: 'UPDATE_ID',\r\n    memoData: memoData,\r\n    firebaseItemId: firebaseItemId,\r\n  };\r\n};\r\n\r\nexport const saveMemo = (memoData)  => {\r\n  return dispatch => {\r\n    axios.post('/memos.json', memoData)\r\n      .then(response => {\r\n        // console.log(response.data);\r\n        dispatch(saveMemoSuccess(memoData, response.data.name));\r\n        dispatch(updateId(memoData, response.data.name));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  };\r\n};\r\n\r\nexport const fetchMemosSuccess = (memos) => {\r\n  return {\r\n    type: 'FETCH_MEMOS_SUCCESS',\r\n    memos: memos\r\n  }\r\n}\r\n\r\nexport const fetchMemos = () => {\r\n  return dispatch => {\r\n    // axios.get('/memos.json')\r\n    //   .then(response => {\r\n    //     const fetchedMemos = [];\r\n    //     for (let key in response.data) {\r\n    //       fetchedMemos.push( response.data[key] );\r\n    //     }\r\n    //     dispatch(fetchMemosSuccess(fetchedMemos));\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.log(error);\r\n    //   })\r\n    const fetchedMemos = []\r\n    fetch('https://memo-a117b.firebaseio.com/memos.json')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n        for (let key in response) {\r\n          fetchedMemos.push( response[key] );\r\n        }\r\n        dispatch(fetchMemosSuccess(fetchedMemos));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  };\r\n};\r\n\r\nexport const updateMemoSuccess = (updatedMemos) => {\r\n  return {\r\n    type: 'UPDATE_MEMO_SUCCESS',\r\n    memos: updatedMemos\r\n  };\r\n};\r\n\r\nexport const updateMemo = () => {\r\n  return {\r\n    type: 'UPDATE_MEMO',\r\n  }\r\n};","export {\r\n  saveMemo,\r\n  fetchMemos,\r\n  updateMemo\r\n} from './memos';","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://memo-a117b.firebaseio.com/'\r\n});\r\n\r\nexport default instance;"],"sourceRoot":""}