{"version":3,"sources":["axios-orders.js","containers/Memos/Memos.js","containers/AddMemo/AddMemo.js","components/UI/SideMenu/SideMenu.js","containers/FilteredMemos/FilteredMemos.js","App.js","serviceWorker.js","store/reducers/memos.js","index.js","store/actions/memos.js","store/actions/index.js"],"names":["axios__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","instance","n","axios","create","baseURL","ResponsiveReactGridLayout","WidthProvider","Responsive","Memos","props","_this","Object","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","memoClicked","memo","toggle","selectMemo","storeId","storeColor","OuterDeleteBtnClicked","setState","showInnerModal","innerDeleteBtnClicked","innerModalToggle","deleteMemo","onDeleteMemo","selectedId","state","db","onToggleModal","checkInput","onSelectMemo","title","content","hasTitle","hasContent","onStoreId","id","titleChangedHandler","event","target","value","onChangeTitle","contentChangedHandler","onChangeContent","updateMemoClicked","updateMemo","onUpdateMemo","onStoreColor","color","changeColor","onChangeColor","generateAddedMemos","addedMemos","length","map","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","key","onDoubleClick","style","memoStyle","className","data-grid","x","y","w","h","draggable","console","error","hideToast","reason","onHideToast","onLayoutChange","bind","C_Users_pakki_Desktop_Web_Dev_React_memo_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","dropdownOpen","layouts","getFromLS","YELLOW","border","backgroundColor","PURPLE","ORANGE","GREEN","BLUE","PINK","onFetchMemos","firebase","apps","initializeApp","apiKey","authDomain","databaseURL","database","layout","newLayout","layoutName","global","localStorage","setItem","JSON","stringify","_this2","atLeastOneInputHasValue","classes","dialog","showStoredMemo","_material_ui_core__WEBPACK_IMPORTED_MODULE_11__","open","showModal","onClose","fullWidth","maxWidth","paper","autoFocus","margin","label","type","required","onChange","selectedMemoTitle","multiline","rows","selectedMemoContent","formControl","selectedMemoColor","colorSelected","name","selectEmpty","root","onClick","variant","button","disabled","aria-labelledby","aria-describedby","toast","showToast","toastMsg","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","_components_UI_SideMenu_SideMenu__WEBPACK_IMPORTED_MODULE_14__","history","_containers_AddMemo_AddMemo__WEBPACK_IMPORTED_MODULE_13__","memosFetched","breakpoints","lg","md","sm","xs","xxs","cols","rowHeight","isDraggable","progress","React","PureComponent","emptyObject","data","isEmpty","keys","constructor","savedLayout","getItem","parse","minW","maxW","connect","memos","tempMemos","showAllMemos","filterColor","dispatch","memoId","firebaseDb","memoTitle","memoContent","memoColor","actions","withStyles","theme","spacing","unit","input","display","minWidth","marginTop","close","padding","AddMemo","deleteInput","saveMemo","memoData","Date","getTime","onSaveMemo","saveMemoClicked","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core__WEBPACK_IMPORTED_MODULE_9__","Component","SideMenu","menu","checked","openNestedList","dragToggleSwitched","onToggleDraggable","closeDrawer","openDrawer","createOnClick","onCreateMemo","filterOnClick","colorClicked","push","onFilterMemos","searchClicked","onSearch","titleClicked","document","body","scrollTop","documentElement","fullList","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","_material_ui_icons__WEBPACK_IMPORTED_MODULE_9__","primary","in","timeout","unmountOnExit","component","disablePadding","nestedBlue","inset","nestedGreen","nestedOrange","nestedPink","nestedPurple","nestedYellow","href","rel","secondary","position","menuButton","aria-label","_material_ui_icons_Menu__WEBPACK_IMPORTED_MODULE_11___default","searchIcon","_material_ui_icons_Search__WEBPACK_IMPORTED_MODULE_10___default","fab","size","anchor","onOpen","tabIndex","role","width","flexGrow","textAlign","paddingTop","paddingBottom","marginLeft","marginRight","paddingLeft","bottom","right","zIndex","tooltip","FilteredMemos","classCallCheck","possibleConstructorReturn","getPrototypeOf","searchOnChange","searchedWord","searchingMemo","filter","toLowerCase","includes","react_default","searchPaper","paperContainer","index_es","elevation","textField","goBack","ArrowBack_default","justifyContent","marginBottom","objectSpread","mixins","gutters","App","routes","react_router","path","exact","to","withRouter","Boolean","window","location","hostname","match","initialState","showNewMemoDialog","arrIndex","arguments","undefined","action","newMemo","firebaseItemId","concat","editedmemos","index","updateIdUpdates","ref","update","then","catch","log","renewMemos","deleteMemoUpdates","updatedmemos","updateMemoUpdates","colorChangedMemos","changeColorUpdates","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","createMuiTheme","palette","main","ReactDOM","render","es","react_router_dom","core_styles","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","post","response","saveMemoSuccess","updateId","fetchMemos","fetchedMemos","fetch","ok","Error","statusText","json","d","__webpack_exports__","memos_saveMemo"],"mappings":"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","file":"static/js/main.d639ae76.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://memo-a117b.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport firebase from 'firebase';\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MenuItem, \r\n          Select, \r\n          InputLabel, \r\n          FormControl, \r\n          Dialog, \r\n          DialogTitle,\r\n          DialogActions, \r\n          DialogContent,\r\n          TextField, \r\n          Button,\r\n          CircularProgress,\r\n          Snackbar } from '@material-ui/core';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport AddMemo from '../../containers/AddMemo/AddMemo';\r\nimport SideMenu from '../../components/UI/SideMenu/SideMenu';\r\nimport './Memos.css';\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n  progress: {\r\n    marginTop: theme.spacing.unit * 20,\r\n  },\r\n  paper: {\r\n    margin: 0\r\n  },\r\n  close: {\r\n    padding: theme.spacing.unit * 0.5\r\n  }\r\n});\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\nclass Memos extends React.PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.onLayoutChange = this.onLayoutChange.bind(this);\r\n    this.state = {\r\n      hasTitle: false,\r\n      hasContent: false,\r\n      dropdownOpen: false,\r\n      db: null,\r\n      layouts: getFromLS('layouts'),\r\n      memoStyle: {\r\n        'YELLOW': {\r\n          border: '1px solid #feef9c',\r\n          backgroundColor: '#feef9c'\r\n        },\r\n        'PURPLE': {\r\n          border: '1px solid #dcdfff',\r\n          backgroundColor: '#dcdfff'\r\n        },\r\n        'ORANGE': {\r\n          border: '1px solid #feccaf',\r\n          backgroundColor: '#feccaf'\r\n        },\r\n        'GREEN': {\r\n          border: '1px solid #b1ffb1',\r\n          backgroundColor: '#b1ffb1'\r\n        },\r\n        'BLUE': {\r\n          border: '1px solid #d8f1ff',\r\n          backgroundColor: '#d8f1ff'\r\n        },\r\n        'PINK': {\r\n          border: '1px solid #feb0bc',\r\n          backgroundColor: '#feb0bc'\r\n        }\r\n      },\r\n      showInnerModal: false\r\n    };\r\n    \r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.onFetchMemos();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set up Firebase config here once, for connecting to the db.\r\n    var config = {\r\n      apiKey: 'AIzaSyDgZKmgW7LpUpJmHkMpF0II4AcfHyfZFuo',\r\n      authDomain: 'memo-a117b.firebaseapp.com',\r\n      databaseURL: 'https://memo-a117b.firebaseio.com/'\r\n    };\r\n\r\n    // Prevent duplicate firebase app\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    // firebase.initializeApp(config);\r\n    this.setState({ db: firebase.database() });\r\n  }\r\n\r\n  onLayoutChange(layout, newLayout) {\r\n      saveToLS(\"layouts\", newLayout);\r\n      this.setState({ layouts: newLayout })\r\n  }\r\n\r\n  colorSelected(event) {\r\n    this.changeColor(event.target.value);\r\n  }\r\n\r\n  memoClicked = (memo) => {\r\n    this.toggle();\r\n    this.selectMemo(memo);\r\n    this.storeId(memo);\r\n    this.storeColor(memo);\r\n  }\r\n\r\n  OuterDeleteBtnClicked = () => {\r\n    this.setState({ \r\n      showInnerModal: true\r\n    });\r\n  }\r\n\r\n  // Really delete the memo\r\n  innerDeleteBtnClicked = () => {\r\n    this.innerModalToggle();  // Close inner modal\r\n    this.toggle();  // Close outer modal\r\n    this.deleteMemo();  // Delete the memo on Firebase\r\n  }\r\n\r\n  // Delete the memo on Firebase\r\n  deleteMemo = () => {\r\n    this.props.onDeleteMemo(this.props.selectedId, this.state.db)\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.onToggleModal();\r\n  }\r\n\r\n  innerModalToggle = () => {\r\n    this.setState(state => ({ \r\n      showInnerModal: !state.showInnerModal\r\n    }));\r\n  }\r\n\r\n  selectMemo = (memo) => {\r\n    this.checkInput(memo);\r\n    this.props.onSelectMemo(memo.title, memo.content)\r\n  }\r\n\r\n  checkInput = (memo) => {\r\n    if (memo.title === null || memo.title === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n\r\n    if (memo.content === null || memo.content === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n  }\r\n\r\n  storeId = (memo) => {\r\n    this.props.onStoreId(memo.id)\r\n  }\r\n\r\n  titleChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n    this.props.onChangeTitle(event.target.value);\r\n  }\r\n\r\n  contentChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n    this.props.onChangeContent(event.target.value);\r\n  }\r\n\r\n  updateMemoClicked = () => {\r\n    this.toggle();\r\n    this.updateMemo();\r\n  }\r\n\r\n  updateMemo = () => {\r\n    this.props.onUpdateMemo(this.state.db);\r\n  }\r\n\r\n  storeColor = (memo) => {\r\n    this.props.onStoreColor(memo.color)\r\n  }\r\n\r\n  changeColor = (color) => {\r\n    this.props.onChangeColor(color, this.state.db);\r\n  }\r\n\r\n  generateAddedMemos = () => {\r\n    if (this.props.addedMemos.length > 0) {\r\n      return this.props.addedMemos.map(memo => (\r\n        <div\r\n          key={memo.id}\r\n          onDoubleClick={() => this.memoClicked(memo)}\r\n          style={this.state.memoStyle[memo.color]}\r\n          className='memo'\r\n          data-grid={{ x: 0, y: 0, w: 3, h: 5 }}\r\n        >\r\n\r\n          <h3>{memo.title}</h3>\r\n          <hr />\r\n          <div>{memo.content}</div>\r\n          {this.props.draggable\r\n            ? <i className=\"material-icons dragHandle\">drag_handle</i>\r\n            : null}\r\n        </div>\r\n\r\n      ));\r\n    } else {\r\n      console.error('no firebase widgets available yet.');\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n\r\n  hideToast = (event, reason) => {\r\n\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.props.onHideToast(); // trigger the change of Redux state\r\n  }\r\n\r\n  render() {\r\n\r\n    let atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n    \r\n    const { classes } = this.props;\r\n\r\n    let dialog = null;\r\n    if (this.props.showStoredMemo) {\r\n\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            className={classes.paper}\r\n          >\r\n            {/* <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle> */}\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.props.selectedMemoTitle}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.props.selectedMemoContent}\r\n              />\r\n\r\n              <FormControl \r\n                required \r\n                className={classes.formControl}>\r\n                <InputLabel>Color</InputLabel>\r\n                  <Select\r\n                    value={this.props.selectedMemoColor}\r\n                    onChange={(event) => this.colorSelected(event)}\r\n                    name=\"color\"\r\n                    className={classes.selectEmpty}\r\n                  >\r\n                    <MenuItem value=\"BLUE\">Blue</MenuItem>\r\n                    <MenuItem value=\"GREEN\">Green</MenuItem>\r\n                    <MenuItem value=\"ORANGE\">Orange</MenuItem>\r\n                    <MenuItem value=\"PINK\">Pink</MenuItem>\r\n                    <MenuItem value=\"PURPLE\">Purple</MenuItem>\r\n                    <MenuItem value=\"YELLOW\">Yellow</MenuItem>\r\n                  </Select>\r\n              </FormControl>\r\n\r\n            </DialogContent>\r\n            <DialogActions className={classes.root}>\r\n              <Button \r\n                onClick={this.OuterDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n              <Button \r\n                onClick={this.updateMemoClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                UPDATE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={this.state.showInnerModal}\r\n            onClose={this.innerModalToggle}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Really delete this memo?\"}</DialogTitle>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.innerModalToggle} \r\n                color=\"primary\">\r\n                CANCEL\r\n              </Button>\r\n              <Button \r\n                onClick={this.innerDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let toast = null;\r\n    let showToast = false;\r\n    // Notify user when the web app completed an action\r\n    if (this.props.toastMsg) {\r\n      showToast = true;\r\n    }\r\n    toast = (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={showToast}\r\n          autoHideDuration={3000}\r\n          onClose={this.hideToast}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{this.props.toastMsg}</span>}\r\n        />\r\n      </div>\r\n    );\r\n    \r\n    return (\r\n      <div>\r\n        <SideMenu history={this.props.history} />\r\n        <AddMemo />\r\n\r\n        {this.props.memosFetched\r\n          ? \r\n          <ResponsiveReactGridLayout\r\n            className=\"layout\"\r\n            breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\r\n            cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n            rowHeight={40}\r\n            layouts={this.state.layouts}\r\n            onLayoutChange={(layout, newLayout) =>\r\n              this.onLayoutChange(layout, newLayout)\r\n            }\r\n            isDraggable={this.props.draggable}\r\n          >\r\n            {this.generateAddedMemos()}\r\n          </ResponsiveReactGridLayout>\r\n          : (<CircularProgress color=\"secondary\" className={classes.progress} />)\r\n        }\r\n\r\n        {dialog}\r\n        {toast}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const emptyObject = (data) => {\r\n  let isEmpty = true;\r\n\r\n  if (data && data !== 'undefined' && data !== null) {\r\n    isEmpty = Object.keys(data).length === 0 && data.constructor === Object;\r\n  }\r\n\r\n  return isEmpty;\r\n}\r\n\r\nfunction getFromLS(layoutName) {\r\n  if (global.localStorage) {\r\n    let savedLayout = global.localStorage.getItem(layoutName);\r\n    if (savedLayout && !emptyObject(savedLayout)) {\r\n      return JSON.parse(savedLayout).layouts;\r\n    } else {\r\n      return { lg: [{ x: 0, y: 0, w: 4, h: 4, minW: 4, maxW: 8 }] };\r\n    }\r\n  }\r\n}\r\n\r\nexport function saveToLS(layoutName, value) {\r\n  if (global.localStorage) {\r\n    global.localStorage.setItem(layoutName, JSON.stringify({ layouts: value }));\r\n  } else {\r\n    console.error('localStorage is not supported');\r\n  }\r\n}\r\n\r\nexport const mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    selectedMemoColor: state.selectedMemoColor,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor,\r\n    draggable: state.draggable,\r\n    toastMsg: state.toastMsg\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteMemo: (id, db) => dispatch({ type: 'DELETE_MEMO', memoId: id, firebaseDb: db }),\r\n    onSelectMemo: (title, content) => dispatch({ type: 'SELECT_MEMO', memoTitle: title, memoContent: content }),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' }),\r\n    onStoreId: (id) => dispatch({ type: 'STORE_ID', memoId: id }),\r\n    onChangeTitle: (title) => dispatch({ type: 'CHANGE_TITLE', memoTitle: title }),\r\n    onChangeContent: (content) => dispatch({ type: 'CHANGE_CONTENT', memoContent: content }),\r\n    onUpdateMemo: (db) => dispatch({ type: 'UPDATE_MEMO', firebaseDb: db }),\r\n    onStoreColor: (color) => dispatch({ type: 'STORE_COLOR', memoColor: color }),\r\n    onChangeColor: (color, db) => dispatch({ type: 'CHANGE_COLOR', memoColor: color, firebaseDb: db }),\r\n    onFetchMemos: () => dispatch(actions.fetchMemos()),\r\n    onHideToast: () => dispatch({ type: 'HIDE_TOAST' })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Memos));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios-orders';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, TextField, Button } from '@material-ui/core';\r\n\r\nimport './AddMemo.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  }\r\n});\r\n\r\nclass AddMemo extends Component {\r\n\r\n\tstate = {\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t\thasTitle: false,\r\n\t\thasContent: false\r\n\t}\r\n\r\n\ttoggle = () => {\r\n\t\tthis.props.onToggleModal();\r\n\t\tthis.deleteInput();\t// Clear previous input fields\r\n\t}\r\n\r\n\tsaveMemo = () => {\r\n\t\tconst memoData = {\r\n\t\t\tid: new Date().getTime(),\r\n\t\t\ttitle: this.state.title,\r\n\t\t\tcontent: this.state.content,\r\n\t\t\tcolor: 'YELLOW'\r\n\t\t}\r\n\t\tthis.props.onSaveMemo(memoData);\r\n\t}\r\n\r\n\t// Clear previous input fields\r\n\tdeleteInput() {\r\n\t\tthis.setState({\r\n\t\t\ttitle: '',\r\n\t\t\tcontent: '',\r\n\t\t\thasTitle: false,\r\n\t\t\thasContent: false\r\n\t\t})\r\n\t}\r\n\r\n\tsaveMemoClicked = () => {\r\n\t\tthis.toggle();\r\n\t\tthis.saveMemo();\r\n\t}\r\n\r\n\ttitleChangedHandler = (event) => {\r\n\t\tif (event.target.value === null || event.target.value === '') {\r\n\t\t\tthis.setState({ hasTitle: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ hasTitle: true });\r\n\t\t}\r\n\t\tthis.setState({ title: event.target.value });\r\n\t}\r\n\r\n\tcontentChangedHandler = (event) => {\r\n\t\tif (event.target.value === null || event.target.value === '') {\r\n\t\t\tthis.setState({ hasContent: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ hasContent: true });\r\n\t\t}\r\n\t\tthis.setState({ content: event.target.value });\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tlet atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n\r\n    const { classes } = this.props;\r\n\r\n    let dialog = null;\r\n\t\tif (!this.props.showStoredMemo) {\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth={true}\r\n            maxWidth=\"sm\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">Create New Memo</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.state.title}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.state.content}\r\n              />\r\n            </DialogContent>\r\n            <DialogActions className={classes.root}>\r\n              <Button \r\n                onClick={this.saveMemoClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                SAVE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n        {dialog}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n    showStoredMemo: state.showStoredMemo,\r\n\t\tshowModal: state.showModal\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSaveMemo: (memoData) => dispatch(actions.saveMemo(memoData)),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' })\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(AddMemo, axios));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ListItemSecondaryAction, \r\n          Typography, \r\n          Toolbar, \r\n          AppBar, \r\n          IconButton, \r\n          ListItemText, \r\n          ListItemIcon, \r\n          ListItem, \r\n          Divider, \r\n          List, \r\n          SwipeableDrawer, \r\n          Switch,\r\n          Collapse,\r\n          Fab,\r\n          Icon } from '@material-ui/core';\r\nimport {  ColorLens, \r\n          Create, \r\n          DragHandle, \r\n          ExpandLess, \r\n          ExpandMore } from '@material-ui/icons';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport './SideMenu.css';\r\n\r\nconst styles = theme => ({\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    paddingTop: 12,\r\n    paddingBottom: 12\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  searchIcon: {\r\n    marginRight: -12\r\n  },\r\n  nestedBlue: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#d8f1ff'\r\n  },\r\n  nestedGreen: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#b1ffb1'\r\n  },\r\n  nestedOrange: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feccaf'\r\n  },\r\n  nestedPink: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feb0bc'\r\n  },\r\n  nestedPurple: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#dcdfff'\r\n  },\r\n  nestedYellow: {\r\n    paddingLeft: theme.spacing.unit * 5,\r\n    backgroundColor: '#feef9c'\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2,\r\n    zIndex: theme.zIndex.tooltip\r\n  }\r\n});\r\n\r\n\r\nclass SideMenu extends Component {\r\n  state = {\r\n    menu: false,\r\n    checked: false,\r\n    openNestedList: false\r\n  };\r\n\r\n  dragToggleSwitched = event => {\r\n    this.setState({ checked: !this.state.checked });\r\n\r\n    if (event.target.checked === true) {\r\n      // Drag mode ON\r\n      this.props.onToggleDraggable(true);\r\n    } else {\r\n      // Drag mode OFF\r\n      this.props.onToggleDraggable(false);\r\n    }\r\n  };\r\n\r\n  closeDrawer = () => {\r\n    this.setState({ menu: false });\r\n  };\r\n\r\n  openDrawer = () => {\r\n    this.setState({ menu: true });\r\n  };\r\n\r\n  // Create new memo\r\n  createOnClick = () => {\r\n    this.closeDrawer();\r\n    this.props.onCreateMemo();\r\n  }\r\n\r\n  // Open sub-list of colors to be filtered\r\n  filterOnClick = () => {\r\n    this.setState( state => ({\r\n      openNestedList: !state.openNestedList\r\n    }));\r\n  }\r\n\r\n  // One of the color is clicked\r\n  colorClicked = (filterColor) => {\r\n\t\tthis.props.history.push('/memo/filtered'); // Redirect to that path\r\n    this.props.onFilterMemos(filterColor);  // Pass the filter color to Redux\r\n    this.closeDrawer(); // Close the side menu\r\n    this.setState({ openNestedList: false }); // Close sub-list of colors\r\n    this.props.onToggleDraggable(false);  // Turn drag mode OFF\r\n  }\r\n\r\n  // Search icon is clicked\r\n  searchClicked = () => {\r\n    this.props.onSearch();  // Show all memos and ready to filter memos by text\r\n    this.props.history.push('/memo/filtered'); // Redirect to that path\r\n    this.props.onToggleDraggable(false);  // Turn drag mode OFF\r\n  }\r\n\r\n  // When web app title is clicked, scroll to top\r\n  titleClicked = () => {\r\n    document.body.scrollTop = 0; // For Safari\r\n    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const fullList = (\r\n      <div className={classes.fullList}>\r\n        <List>\r\n          <ListItem button onClick={this.filterOnClick}>\r\n            <ListItemIcon>\r\n              <ColorLens color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Filter by Color\" />\r\n            {this.state.openNestedList ? <ExpandLess color=\"secondary\" /> : <ExpandMore color=\"secondary\" />}\r\n          </ListItem>\r\n          <Collapse in={this.state.openNestedList} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n              <ListItem button className={classes.nestedBlue}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Blue\" \r\n                  onClick={() => this.colorClicked(\"BLUE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedGreen}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Green\" \r\n                  onClick={() => this.colorClicked(\"GREEN\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedOrange}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Orange\" \r\n                  onClick={() => this.colorClicked(\"ORANGE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedPink}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Pink\" \r\n                  onClick={() => this.colorClicked(\"PINK\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedPurple}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Purple\" \r\n                  onClick={() => this.colorClicked(\"PURPLE\")} />\r\n              </ListItem>\r\n              <ListItem button className={classes.nestedYellow}>\r\n                <ListItemText \r\n                  inset \r\n                  primary=\"Yellow\" \r\n                  onClick={() => this.colorClicked(\"YELLOW\")} />\r\n              </ListItem>\r\n            </List>\r\n          </Collapse>\r\n\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <DragHandle color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Drag Memo\" />\r\n            <ListItemSecondaryAction>\r\n              <Switch\r\n                onChange={event => this.dragToggleSwitched(event)}\r\n                checked={this.state.checked}\r\n              />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n\r\n          <ListItem \r\n            button\r\n            onClick={this.createOnClick}>\r\n            <ListItemIcon>\r\n              <Create color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Create New Memo\" />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem \r\n            button \r\n            component=\"a\" \r\n            href=\"https://github.com/hkKevin/memo\" \r\n            target=\"_blank\" rel=\"noopener\">\r\n            <ListItemText secondary=\"GitHub Repository\" />\r\n          </ListItem>\r\n          <ListItem \r\n            button \r\n            component=\"a\" \r\n            href=\"https://github.com/hkKevin\" \r\n            target=\"_blank\" rel=\"noopener\">\r\n            <ListItemText secondary=\"Developed by Pak Kiu Leung\" />\r\n          </ListItem>\r\n        </List>\r\n        \r\n          \r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <AppBar color=\"inherit\" position=\"fixed\" className={classes.root}>\r\n          <Toolbar>\r\n            <IconButton \r\n               color=\"primary\"\r\n               onClick={this.openDrawer} \r\n               className={classes.menuButton} \r\n               aria-label=\"Menu\">\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography\r\n              id=\"appTitle\"\r\n              className={classes.title}\r\n              onClick={this.titleClicked}\r\n              variant=\"h6\" \r\n              color=\"primary\">\r\n              Memo\r\n            </Typography>\r\n            <IconButton \r\n              color=\"primary\" \r\n              className={classes.searchIcon}\r\n              onClick={this.searchClicked}>\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Fab \r\n          color=\"primary\" \r\n          aria-label=\"Edit\" \r\n          className={classes.fab}\r\n          size=\"medium\"\r\n          onClick={this.createOnClick}>\r\n          <Icon>edit_icon</Icon>\r\n        </Fab>\r\n\r\n        <SwipeableDrawer \r\n          anchor=\"left\"\r\n          open={this.state.menu}  // Is the menu opened or closed\r\n          onOpen={this.openDrawer}  // Open the menu\r\n          onClose={this.closeDrawer} /* Close the menu*/ >\r\n          <div\r\n            tabIndex={0}\r\n            role=\"button\">\r\n            {fullList}\r\n          </div>\r\n        </SwipeableDrawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n  return {\r\n    onToggleDraggable: (draggable) => dispatch({ type: 'TOGGLE_DRAGGABLE', isDraggable: draggable }),\r\n    onCreateMemo: () => dispatch({ type: 'CREATE_MEMO' }),\r\n    onFilterMemos: (filterColor) => dispatch({ type: 'FILTER_MEMOS', filterColor: filterColor }),\r\n    onSearch: () => dispatch({ type: 'SEARCH_MEMO' })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(SideMenu));","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MenuItem, \r\n          AppBar,\r\n          Toolbar,\r\n          IconButton,\r\n          Typography,\r\n          Select, \r\n          InputLabel, \r\n          FormControl, \r\n          Dialog, \r\n          DialogActions, \r\n          DialogContent,\r\n          TextField, \r\n          Button,\r\n          DialogTitle, \r\n          Paper,\r\n          Snackbar } from '@material-ui/core';\r\n  import ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport { connect } from 'react-redux';\r\nimport firebase from 'firebase';\r\n\r\nimport './FilteredMemos.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst styles = theme => ({\r\n  paperContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginTop: theme.spacing.unit * 9,\r\n    marginBottom: -theme.spacing.unit * 9\r\n  },\r\n  paper: {\r\n    ...theme.mixins.gutters(),\r\n    // paddingTop: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit * 1,\r\n    maxWidth: 300,  \r\n  },\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 220,\r\n  }\r\n});\r\n\r\nclass FilteredMemos extends Component {\r\n\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasTitle: false,\r\n      hasContent: false,\r\n      dropdownOpen: false,\r\n      db: null,\r\n      memoStyle: {\r\n        'YELLOW': {\r\n          border: '1px solid #feef9c',\r\n          backgroundColor: '#feef9c'\r\n        },\r\n        'PURPLE': {\r\n          border: '1px solid #dcdfff',\r\n          backgroundColor: '#dcdfff'\r\n        },\r\n        'ORANGE': {\r\n          border: '1px solid #feccaf',\r\n          backgroundColor: '#feccaf'\r\n        },\r\n        'GREEN': {\r\n          border: '1px solid #b1ffb1',\r\n          backgroundColor: '#b1ffb1'\r\n        },\r\n        'BLUE': {\r\n          border: '1px solid #d8f1ff',\r\n          backgroundColor: '#d8f1ff'\r\n        },\r\n        'PINK': {\r\n          border: '1px solid #feb0bc',\r\n          backgroundColor: '#feb0bc'\r\n        }\r\n      },\r\n      showInnerModal: false,\r\n      searchedWord: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set up Firebase config here once, for connecting to the db.\r\n    var config = {\r\n      apiKey: 'AIzaSyDgZKmgW7LpUpJmHkMpF0II4AcfHyfZFuo',\r\n      authDomain: 'memo-a117b.firebaseapp.com',\r\n      databaseURL: 'https://memo-a117b.firebaseio.com/'\r\n    };\r\n    // Prevent duplicate firebase app\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    // firebase.initializeApp(config);\r\n    this.setState({ db: firebase.database() });\r\n  }\r\n\r\n  colorSelected(event) {\r\n    this.changeColor(event.target.value);\r\n  }\r\n\r\n  memoClicked = (memo) => {\r\n    this.toggle();\r\n    this.selectMemo(memo);\r\n    this.storeId(memo);\r\n    this.storeColor(memo);\r\n  }\r\n\r\n  OuterDeleteBtnClicked = () => {\r\n    this.setState({ \r\n      showInnerModal: true\r\n    });\r\n  }\r\n\r\n  // Really delete the memo\r\n  innerDeleteBtnClicked = () => {\r\n    this.innerModalToggle();  // Close inner modal\r\n    this.toggle();  // Close outer modal\r\n    this.deleteMemo();  // Delete the memo on Firebase\r\n  }\r\n\r\n  // Delete the memo on Firebase\r\n  deleteMemo = () => {\r\n    this.props.onDeleteMemo(this.props.selectedId, this.state.db)\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.onToggleModal();\r\n  }\r\n\r\n  innerModalToggle = () => {\r\n    this.setState(state => ({ \r\n      showInnerModal: !state.showInnerModal\r\n    }));\r\n  }\r\n\r\n  selectMemo = (memo) => {\r\n    this.checkInput(memo);\r\n    this.props.onSelectMemo(memo.title, memo.content)\r\n  }\r\n\r\n  checkInput = (memo) => {\r\n    if (memo.title === null || memo.title === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n\r\n    if (memo.content === null || memo.content === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n  }\r\n\r\n  storeId = (memo) => {\r\n    this.props.onStoreId(memo.id)\r\n  }\r\n\r\n  titleChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasTitle: false });\r\n    } else {\r\n      this.setState({ hasTitle: true });\r\n    }\r\n    this.props.onChangeTitle(event.target.value);\r\n  }\r\n\r\n  contentChangedHandler = (event) => {\r\n    if (event.target.value === null || event.target.value === '') {\r\n      this.setState({ hasContent: false });\r\n    } else {\r\n      this.setState({ hasContent: true });\r\n    }\r\n    this.props.onChangeContent(event.target.value);\r\n  }\r\n\r\n  updateMemoClicked = () => {\r\n    this.toggle();\r\n    this.updateMemo();\r\n  }\r\n\r\n  updateMemo = () => {\r\n    this.props.onUpdateMemo(this.state.db);\r\n  }\r\n\r\n  storeColor = (memo) => {\r\n    this.props.onStoreColor(memo.color)\r\n  }\r\n\r\n  changeColor = (color) => {\r\n    this.props.onChangeColor(color, this.state.db);\r\n  }\r\n\r\n  searchOnChange = (event) => {\r\n    this.setState({\r\n      searchedWord: event.target.value\r\n    });\r\n  }\r\n\r\n  generateAddedMemos = () => {\r\n    if (this.props.addedMemos.length > 0) {\r\n\r\n      let filteredMemos = \"\"\r\n      if ( !this.props.searchingMemo ) {\r\n        // Show filtered memos\r\n        filteredMemos = this.props.addedMemos.filter(memo => memo.color === this.props.filterColor);\r\n      } else {\r\n        // Show memos that contain searched word\r\n        filteredMemos = this.props.addedMemos.filter(\r\n          memo => memo.title.toLowerCase().includes(this.state.searchedWord.toLowerCase()) || \r\n                  memo.content.toLowerCase().includes(this.state.searchedWord.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      return filteredMemos.map(memo => (\r\n        <div\r\n          key={memo.id}\r\n          onDoubleClick={() => this.memoClicked(memo)}\r\n          style={this.state.memoStyle[memo.color]}\r\n          className='memo'\r\n        >\r\n\r\n          <h3>{memo.title}</h3>\r\n          <hr />\r\n          <div>{memo.content}</div>\r\n          {this.props.draggable\r\n            ? <i className=\"material-icons dragHandle\">drag_handle</i>\r\n            : null}\r\n        </div>\r\n\r\n      ));\r\n    } else {\r\n      console.error('no firebase widgets available yet.');\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n\r\n  hideToast = (event, reason) => {\r\n\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.props.onHideToast(); // trigger the change of Redux state\r\n  }\r\n\r\n\r\n\trender() {\r\n\r\n    // console.log(this.state.searchedWord)\r\n\r\n    let atLeastOneInputHasValue = this.state.hasTitle || this.state.hasContent;\r\n\r\n    const { classes } = this.props;\r\n\r\n    let searchPaper = null;\r\n    searchPaper = (\r\n      <div className={classes.paperContainer}>\r\n        <Paper className={classes.paper} elevation={2}>\r\n          <TextField\r\n            id=\"standard-search\"\r\n            key=\"searchField\"\r\n            name=\"searchField\"\r\n            label=\"Find...\"\r\n            type=\"search\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            autoFocus\r\n            onChange={this.searchOnChange}\r\n            value={this.state.searchedWord}\r\n          />\r\n        </Paper>\r\n      </div>\r\n    );\r\n\r\n    let dialog = null;\r\n    if (this.props.showStoredMemo) {\r\n      dialog = (\r\n        <div>\r\n          <Dialog\r\n            open={this.props.showModal}\r\n            onClose={this.toggle}\r\n            fullWidth={true}\r\n            maxWidth=\"sm\"\r\n          >\r\n            <DialogContent>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"normal\"\r\n                id=\"memoTitle\"\r\n                label=\"Title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                onChange={this.titleChangedHandler}\r\n                value={this.props.selectedMemoTitle}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                id=\"memoContent\"\r\n                label=\"Content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                required\r\n                multiline\r\n                rows='10'\r\n                onChange={this.contentChangedHandler}\r\n                value={this.props.selectedMemoContent}\r\n              />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel>Color</InputLabel>\r\n                  <Select\r\n                    value={this.props.selectedMemoColor}\r\n                    onChange={(event) => this.colorSelected(event)}\r\n                    name=\"color\"\r\n                    className={classes.selectEmpty}\r\n                  >\r\n                    <MenuItem value=\"BLUE\">Blue</MenuItem>\r\n                    <MenuItem value=\"GREEN\">Green</MenuItem>\r\n                    <MenuItem value=\"ORANGE\">Orange</MenuItem>\r\n                    <MenuItem value=\"PINK\">Pink</MenuItem>\r\n                    <MenuItem value=\"PURPLE\">Purple</MenuItem>\r\n                    <MenuItem value=\"YELLOW\">Yellow</MenuItem>\r\n                  </Select>\r\n              </FormControl>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.OuterDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"primary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n              <Button \r\n                onClick={this.updateMemoClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button} \r\n                disabled={!atLeastOneInputHasValue}>\r\n                UPDATE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={this.state.showInnerModal}\r\n            onClose={this.innerModalToggle}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Really delete this memo?\"}</DialogTitle>\r\n            <DialogActions>\r\n              <Button \r\n                onClick={this.innerModalToggle} \r\n                color=\"primary\">\r\n                CANCEL\r\n              </Button>\r\n              <Button \r\n                onClick={this.innerDeleteBtnClicked} \r\n                variant=\"text\" \r\n                color=\"secondary\" \r\n                className={classes.button}>\r\n                DELETE\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let toast = null;\r\n    let showToast = false;\r\n    // Notify user when the web app completed an action\r\n    if (this.props.toastMsg) {\r\n      showToast = true;\r\n    }\r\n    toast = (\r\n      <div>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={showToast}\r\n          autoHideDuration={3000}\r\n          onClose={this.hideToast}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{this.props.toastMsg}</span>}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    \r\n\t\treturn (\r\n\t\t\t<div>\r\n        <AppBar color=\"default\" position=\"fixed\">\r\n          <Toolbar>\r\n            <IconButton \r\n              onClick={() => this.props.history.goBack()} \r\n              className={classes.menuButton} \r\n              aria-label=\"Menu\">\r\n              <ArrowBack color=\"primary\" />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"primary\">\r\n              Memo\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        {this.props.searchingMemo ? (searchPaper) : null}\r\n\r\n        {this.props.memosFetched\r\n          ?\r\n          (\r\n          <div className=\"filteredLayout\">\r\n            {this.generateAddedMemos()}\r\n          </div>\r\n          )\r\n          : null\r\n        }\r\n\r\n        {dialog}\r\n        {toast}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    showModal: state.showModal,\r\n    addedMemos: state.memos,\r\n    tempMemos: state.tempMemos,\r\n    selectedMemoTitle: state.selectedMemoTitle,\r\n    selectedMemoContent: state.selectedMemoContent,\r\n    selectedMemoColor: state.selectedMemoColor,\r\n    showStoredMemo: state.showStoredMemo,\r\n    showAllMemos: state.showAllMemos,\r\n    selectedId: state.selectedId,\r\n    memosFetched: state.memosFetched,\r\n    filterColor: state.filterColor,\r\n    draggable: state.draggable,\r\n    searchingMemo: state.searchingMemo,\r\n    toastMsg: state.toastMsg\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteMemo: (id, db) => dispatch({ type: 'DELETE_MEMO', memoId: id, firebaseDb: db }),\r\n    onSelectMemo: (title, content) => dispatch({ type: 'SELECT_MEMO', memoTitle: title, memoContent: content }),\r\n    onToggleModal: () => dispatch({ type: 'TOGGLE_MODAL' }),\r\n    onStoreId: (id) => dispatch({ type: 'STORE_ID', memoId: id }),\r\n    onChangeTitle: (title) => dispatch({ type: 'CHANGE_TITLE', memoTitle: title }),\r\n    onChangeContent: (content) => dispatch({ type: 'CHANGE_CONTENT', memoContent: content }),\r\n    onUpdateMemo: (db) => dispatch({ type: 'UPDATE_MEMO', firebaseDb: db }),\r\n    onStoreColor: (color) => dispatch({ type: 'STORE_COLOR', memoColor: color }),\r\n    onChangeColor: (color, db) => dispatch({ type: 'CHANGE_COLOR', memoColor: color, firebaseDb: db }),\r\n    onFetchMemos: () => dispatch(actions.fetchMemos()),\r\n    onHideToast: () => dispatch({ type: 'HIDE_TOAST' })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FilteredMemos));\r\n","import React, { Component } from 'react';\nimport { Route, Redirect, Switch, withRouter } from 'react-router-dom';\n\nimport './App.css';\nimport Memos from './containers/Memos/Memos';\nimport FilteredMemos from './containers/FilteredMemos/FilteredMemos';\n\nclass App extends Component {\n  \n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path='/memo/filtered' component={FilteredMemos} />\n        <Route path='/memo' exact component={Memos} />\n        <Redirect to='/memo' />\n      </Switch>\n    );\n\n\n\n    return (\n      <div className=\"App\">\n        {routes}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import firebase from 'firebase';\r\n\r\n// Action Reducer\r\n\r\nconst initialState = {\r\n  memos: [],\r\n  selectedMemoTitle: null,\r\n  selectedMemoContent: null,\r\n  selectedId: null,\r\n  selectedMemoColor: null,\r\n  showModal: false,\r\n  showNewMemoDialog: false,\r\n  showStoredMemo: false,\r\n  showAllMemos: true,\r\n  filterColor: \"\",\r\n  arrIndex: 0,\r\n  memosFetched: false,\r\n  draggable: false,\r\n  searchingMemo: false,\r\n  toastMsg: \"\"\r\n}\r\n\r\nconst memos = (state = initialState, action) => {\r\n\r\n  switch ( action.type ) {\r\n\r\n    // Within both AddMemo.js & Memos.js:\r\n\r\n    case 'TOGGLE_MODAL':\r\n      return { \r\n        ...state,\r\n        showModal: !state.showModal\r\n      }\r\n\r\n    // Within AddMemo.js:\r\n\r\n    case 'SAVE_MEMO_SUCCESS':\r\n      const newMemo = {\r\n        ...action.memoData,\r\n        id: action.firebaseItemId\r\n      }\r\n      return {\r\n        ...state,\r\n        memos: state.memos.concat(newMemo),\r\n        selectedId: newMemo.id,\r\n        toastMsg: \"Memo saved\" // Notify user when the new memo saved\r\n      }\r\n\r\n    case 'FETCH_MEMOS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        memos: action.memos,\r\n        memosFetched: true,\r\n        showAllMemos: true,\r\n        toastMsg: \"Double-click to edit memo\" // Notify user when the web app loaded/ reloaded\r\n      }\r\n\r\n\r\n    // Within Memos.js:\r\n\r\n    case 'HIDE_TOAST':\r\n      return {\r\n        ...state,\r\n        toastMsg: \"\" // Set toastMsg to empty string -> Hide the toast\r\n      }\r\n\r\n    case 'UPDATE_ID':\r\n      const editedmemos = state.memos.map( (memo, index) => {\r\n      // Only edit the newly added memo in the memos array\r\n      if (memo.id === state.selectedId) {\r\n        memo.id = state.selectedId;\r\n        state.arrIndex = index\r\n      }\r\n      return memo;\r\n      })\r\n      \r\n      const firebaseDb = firebase.database();\r\n      const updateIdUpdates = {};\r\n      // Update the selected array element to specific child node of Firebase\r\n      updateIdUpdates['/memos/' + state.selectedId] = editedmemos[state.arrIndex];\r\n      firebaseDb.ref()\r\n        .update(updateIdUpdates)\r\n        .then(() => {\r\n          // memo updated in firebase.\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      return state;\r\n      \r\n\r\n    case 'STORE_COLOR':\r\n      return {\r\n        ...state,\r\n        selectedMemoColor: action.memoColor\r\n      }\r\n\r\n\r\n    case 'DELETE_MEMO':\r\n      const renewMemos = state.memos.map( (memo, index) => {\r\n        // Only delete selected memo that is in the memos array\r\n        if (memo.id === action.memoId) {\r\n          memo = null\r\n          state.arrIndex = index\r\n        }\r\n        return memo;\r\n        })\r\n\r\n      let deleteMemoUpdates = {};\r\n      deleteMemoUpdates['/memos/' + action.memoId] = renewMemos[state.arrIndex];\r\n      action.firebaseDb.ref().update(deleteMemoUpdates)\r\n        .then(() => {\r\n          // memo deleted in firebase.       \r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        })\r\n      return { \r\n        ...state,\r\n        memos: state.memos.filter(memo => memo.id !== action.memoId),\r\n        toastMsg: \"Memo deleted\"\r\n      }      \r\n\r\n\r\n    case 'SELECT_MEMO':      \r\n      return { \r\n        ...state,\r\n        selectedMemoTitle: action.memoTitle,\r\n        selectedMemoContent: action.memoContent,\r\n        showStoredMemo: true\r\n      }\r\n\r\n    case 'STORE_ID':      \r\n      return { \r\n        ...state,\r\n        selectedId: action.memoId\r\n      }\r\n\r\n    case 'CHANGE_TITLE':      \r\n      return { \r\n        ...state,\r\n        selectedMemoTitle: action.memoTitle\r\n      }\r\n\r\n    case 'CHANGE_CONTENT':      \r\n      return { \r\n        ...state,\r\n        selectedMemoContent: action.memoContent\r\n      }\r\n\r\n\r\n    case 'UPDATE_MEMO':\r\n      const updatedmemos = state.memos.map( (memo, index) => {\r\n      // Only edit the selected memo in the memos array\r\n      if (memo.id === state.selectedId) {\r\n        memo.id = state.selectedId;\r\n        memo.title =  state.selectedMemoTitle;\r\n        memo.content = state.selectedMemoContent;\r\n        state.arrIndex = index\r\n      }\r\n      return memo;\r\n      })\r\n      \r\n      const updateMemoUpdates = {};\r\n      // Update the selected array element to specific child node of Firebase\r\n      updateMemoUpdates['/memos/' + state.selectedId] = updatedmemos[state.arrIndex];\r\n      action.firebaseDb.ref()\r\n        .update(updateMemoUpdates)\r\n        .then(() => {\r\n          // memo updated in firebase.\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      // return state;\r\n      return {\r\n        ...state,\r\n        toastMsg: \"Memo updated\"\r\n      }\r\n\r\n\r\n    case 'CHANGE_COLOR':\r\n      const colorChangedMemos = state.memos.map( (memo, index) => {\r\n        // Only edit selected memo in the memos array\r\n        if (memo.id === state.selectedId) {\r\n          memo.color = action.memoColor\r\n          state.arrIndex = index\r\n        }\r\n        return memo;\r\n      })\r\n\r\n      const changeColorUpdates = {};\r\n      \r\n      // Update the selected array element to specific child node of Firebase\r\n      changeColorUpdates['/memos/' + state.selectedId] = colorChangedMemos[state.arrIndex];\r\n      action.firebaseDb.ref()\r\n        .update(changeColorUpdates)\r\n        .then(() => {\r\n          // memo updated in firebase.\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      return {\r\n        ...state,\r\n        memos: colorChangedMemos,\r\n        selectedMemoColor: action.memoColor,\r\n        toastMsg: \"Memo color updated\"\r\n      }\r\n    \r\n    // Only show memos with selected color\r\n    case 'FILTER_MEMOS':      \r\n      return { \r\n        ...state,\r\n        showAllMemos: false,\r\n        filterColor: action.filterColor,\r\n        searchingMemo: false\r\n      }\r\n\r\n    case 'TOGGLE_DRAGGABLE':      \r\n      return { \r\n        ...state,\r\n        draggable: action.isDraggable\r\n      }\r\n\r\n    case 'CREATE_MEMO':\r\n      return { \r\n        ...state,\r\n        showModal: true,\r\n        showStoredMemo: false\r\n      }\r\n    \r\n      // Filter memos by text\r\n    case 'SEARCH_MEMO':\r\n      return { \r\n        ...state,\r\n        searchingMemo: true\r\n      }\r\n    \r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default memos;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/memos';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// composeEnhancers\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(thunk)\n));\n\n// const store = createStore(reducer, composeEnhancers(\n//   applyMiddleware(thunk)\n// ));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#880e4f',\n    },\n    secondary: {\n      main: '#1a237e',\n    }\n  },\n  \n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from '../../axios-orders';\r\n\r\n// Action Creators:\r\n\r\nexport const saveMemoSuccess = (memoData, firebaseItemId) => {\r\n  return {\r\n    type: 'SAVE_MEMO_SUCCESS',\r\n    memoData: memoData,\r\n    firebaseItemId: firebaseItemId,\r\n  };\r\n};\r\n\r\nexport const updateId = (memoData, firebaseItemId) => {\r\n  return {\r\n    type: 'UPDATE_ID',\r\n    memoData: memoData,\r\n    firebaseItemId: firebaseItemId,\r\n  };\r\n};\r\n\r\nexport const saveMemo = (memoData)  => {\r\n  return dispatch => {\r\n    axios.post('/memos.json', memoData)\r\n      .then(response => {\r\n        // console.log(response.data);\r\n        dispatch(saveMemoSuccess(memoData, response.data.name));\r\n        dispatch(updateId(memoData, response.data.name));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  };\r\n};\r\n\r\nexport const fetchMemosSuccess = (memos) => {\r\n  return {\r\n    type: 'FETCH_MEMOS_SUCCESS',\r\n    memos: memos\r\n  }\r\n}\r\n\r\nexport const fetchMemos = () => {\r\n  return dispatch => {\r\n    // axios.get('/memos.json')\r\n    //   .then(response => {\r\n    //     const fetchedMemos = [];\r\n    //     for (let key in response.data) {\r\n    //       fetchedMemos.push( response.data[key] );\r\n    //     }\r\n    //     dispatch(fetchMemosSuccess(fetchedMemos));\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.log(error);\r\n    //   })\r\n    const fetchedMemos = []\r\n    fetch('https://memo-a117b.firebaseio.com/memos.json')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(response => {\r\n        // console.log(response);\r\n        for (let key in response) {\r\n          fetchedMemos.push( response[key] );\r\n        }\r\n        dispatch(fetchMemosSuccess(fetchedMemos));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  };\r\n};\r\n\r\nexport const updateMemoSuccess = (updatedMemos) => {\r\n  return {\r\n    type: 'UPDATE_MEMO_SUCCESS',\r\n    memos: updatedMemos\r\n  };\r\n};\r\n\r\nexport const updateMemo = () => {\r\n  return {\r\n    type: 'UPDATE_MEMO',\r\n  }\r\n};","export {\r\n  saveMemo,\r\n  fetchMemos,\r\n  updateMemo\r\n  // hideToast\r\n} from './memos';"],"sourceRoot":""}